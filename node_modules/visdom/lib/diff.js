'use strict';

var isVNode = require('./isVNode');

var _require = require('./ops');

var INSERT = _require.INSERT;
var REPLACE = _require.REPLACE;
var REMOVE = _require.REMOVE;
var REMOVE_PROP = _require.REMOVE_PROP;
var SET_PROP = _require.SET_PROP;


function diffProps(prevNode, nextNode, index) {
  var patches = [];
  var prevProps = Object.keys(prevNode.data);
  var nextProps = Object.keys(nextNode.data);

  prevProps.forEach(function (prop) {
    if (!nextNode.data.hasOwnProperty(prop)) {
      patches.push({
        type: REMOVE_PROP,
        key: prop,
        index: index
      });
    }
  });

  nextProps.forEach(function (prop) {
    if (prevNode.data[prop] !== nextNode.data[prop]) {
      patches.push({
        type: SET_PROP,
        key: prop,
        value: nextNode.data[prop],
        index: index
      });
    }
  });

  return patches;
}

function diffChildren(prevNode, nextNode, offset) {
  var len = Math.max(prevNode.children.length, nextNode.children.length);

  var patches = [];
  var i = void 0;

  for (i = 0; i < len; i += 1) {
    var a = prevNode.children[i];
    var b = nextNode.children[i];

    if (!a) {
      patches.push({
        type: INSERT,
        node: b,
        index: offset + i
      });
    } else {
      patches = patches.concat(diff(a, b, offset + i));
    }
  }

  return patches;
}

function diff(prevNode, nextNode) {
  var index = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];

  var patches = [];

  // skip equal nodes
  if (prevNode === nextNode) {
    return patches;
  }

  if (!nextNode) {
    patches.push({
      type: REMOVE,
      index: index
    });
  } else if (isVNode(nextNode) && isVNode(prevNode)) {
    if (prevNode.name === nextNode.name) {
      patches = patches.concat(diffProps(prevNode, nextNode, index));
      patches = patches.concat(diffChildren(prevNode, nextNode, index + prevNode.children.length));
    } else {
      patches.push({
        type: REPLACE,
        node: nextNode,
        index: index
      });
    }
  } else {
    patches.push({
      type: typeof prevNode === 'undefined' ? INSERT : REPLACE,
      node: nextNode,
      index: index
    });
  }

  return patches;
}

module.exports = diff;