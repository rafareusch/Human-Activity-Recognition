'use strict';

/* eslint-disable complexity */

var createNodeFromVNode = require('./createNodeFromVNode');
var getNodeAtIndex = require('./getNodeAtIndex');

var _require = require('../ops');

var INSERT = _require.INSERT;
var REPLACE = _require.REPLACE;
var REMOVE = _require.REMOVE;
var REMOVE_PROP = _require.REMOVE_PROP;
var SET_PROP = _require.SET_PROP;


function triggerDOMEvent(node, type, detail) {
  var event = new CustomEvent(type, {
    bubbles: true,
    cancelable: true,
    detail: detail
  });

  node.dispatchEvent(event);
}

var patch = function patch(rootNode, patches) {
  patches.forEach(function (p) {
    switch (p.type) {
      case INSERT:
        {
          triggerDOMEvent(rootNode, 'willInsert', { vnode: p.node });
          var newNode = createNodeFromVNode(p.node);
          var parentNode = getNodeAtIndex(rootNode, p.index);
          parentNode.appendChild(newNode);
          triggerDOMEvent(newNode, 'didInsert', { vnode: p.node });
          break;
        }

      case REPLACE:
        {
          var prevChild = getNodeAtIndex(rootNode, p.index);
          var _newNode = createNodeFromVNode(p.node);

          if (!prevChild) {
            throw new Error('Replacing a nonexistent node:', prevChild);
          }

          triggerDOMEvent(rootNode, 'willInsert', { vnode: p.node });
          prevChild.parentNode.insertBefore(_newNode, prevChild);
          triggerDOMEvent(_newNode, 'didInsert', { vnode: p.node });

          triggerDOMEvent(prevChild, 'willRemove', { vnode: p.node });
          prevChild.parentNode.removeChild(prevChild);
          triggerDOMEvent(rootNode, 'didRemove', { vnode: p.node });
          break;
        }

      case REMOVE:
        {
          var node = getNodeAtIndex(rootNode, p.index);

          triggerDOMEvent(node, 'willRemove', { vnode: p.node });
          node.parentNode.removeChild(node);
          triggerDOMEvent(rootNode, 'didRemove', { vnode: p.node });
          break;
        }

      case REMOVE_PROP:
        {
          var _node = getNodeAtIndex(rootNode, p.index);

          triggerDOMEvent(_node, 'willUpdate', { vnode: p.node });
          _node.removeAttribute(p.key);
          triggerDOMEvent(rootNode, 'didRemove', { vnode: p.node });
          break;
        }

      case SET_PROP:
        {
          var _node2 = getNodeAtIndex(rootNode, p.index);

          triggerDOMEvent(_node2, 'willUpdate', { vnode: p.node });
          _node2.setAttribute(p.key, p.value);
          triggerDOMEvent(_node2, 'didUpdate', { vnode: p.node });
          break;
        }

      default:
        break;
    }
  });
};

module.exports = patch;